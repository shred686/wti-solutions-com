---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "WTI Solutions - Technology Solutions for Modern Business" } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={description} />
		<title>{title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
	</head>
	<body class="font-inter antialiased bg-white text-gray-900 overflow-hidden">
		<div id="fullpage-container" class="relative">
			<slot />
		</div>

		<script>
			let currentSection = 0;
			let isScrolling = false;
			let sections = [];
			let totalSections = 0;
			let animatedSections = new Set(); // Track which sections have been animated

			// Initialize sections for full-page scrolling
			function initializeSections() {
				console.log('=== INITIALIZING SECTIONS ===');
				sections = document.querySelectorAll('.full-page-section');
				totalSections = sections.length;
				console.log('Found', totalSections, 'full-page sections');
				
				sections.forEach((section, index) => {
					console.log(`Section ${index}:`, section.className || section.tagName);
					section.style.position = 'fixed';
					section.style.top = '0';
					section.style.left = '0';
					section.style.width = '100vw';
					section.style.height = '100vh';
					section.style.zIndex = totalSections - index;
					section.style.transform = `translateY(${index * 100}vh)`;
					section.style.transition = 'transform 0.56s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
				});
				
				// Set container height
				const container = document.getElementById('fullpage-container');
				if (container) {
					container.style.height = `${totalSections * 100}vh`;
				}
				
				console.log('=== SECTIONS INITIALIZED ===');
			}

			// Initialize animations for sections
			function initializeAnimations() {
				console.log('=== INITIALIZING ANIMATIONS ===');
				console.log('Initializing animations for', sections.length, 'sections');
				
				// Hide elements that will be animated
				sections.forEach((section, index) => {
					console.log(`Setting up section ${index}:`, section.className || section.tagName);
					
					// IntroSection (About) - index 1 - dramatic entrance
					if (index === 1) {
						const elementsToFade = section.querySelectorAll('h2, p, .text-4xl');
						console.log(`Section ${index} - Found ${elementsToFade.length} elements to animate`);
						elementsToFade.forEach(el => {
							el.style.opacity = '0';
							el.style.transform = 'translateY(60px) scale(0.9)';
							el.style.transition = 'opacity 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						});
					}
					
					// CapabilitiesSection - index 2 - enhanced sparkling tiles
					if (index === 2) {
						const tiles = section.querySelectorAll('.bg-slate-charcoal-50');
						console.log(`Section ${index} - Found ${tiles.length} capability tiles`);
						tiles.forEach(tile => {
							tile.style.opacity = '0';
							tile.style.transform = 'scale(0.7) translateY(80px) rotateX(-15deg)';
							tile.style.transition = 'opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						});
					}
					
					// Case Study 1 - index 4 - dramatic slide with parallax
					if (index === 4) {
						const textContent = section.querySelectorAll('h2, h3, p, a');
						const image = section.querySelector('.w-full.h-96');
						console.log(`Section ${index} - Found ${textContent.length} text elements and ${image ? 1 : 0} images`);
						
						textContent.forEach((el, elIndex) => {
							el.style.opacity = '0';
							el.style.transform = 'translateX(-120px) skewX(-5deg)';
							el.style.transition = 'opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						});
						
						if (image) {
							image.style.opacity = '0';
							image.style.transform = 'translateX(120px) scale(0.8) rotateY(-10deg)';
							image.style.transition = 'opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						}
					}
					
					// Services Section - index 5 - floating cards with depth
					if (index === 5) {
						const serviceCards = section.querySelectorAll('.bg-steel-charcoal-50');
						console.log(`Section ${index} - Found ${serviceCards.length} service cards`);
						serviceCards.forEach((card, cardIndex) => {
							card.style.opacity = '0';
							card.style.transform = `translateY(100px) rotateZ(${cardIndex * 5 - 10}deg) scale(0.8)`;
							card.style.transition = 'opacity 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						});
					}
					
					// Testimonials Section - index 6 - dramatic scale and rotation
					if (index === 6) {
						const testimonialCards = section.querySelectorAll('.bg-white');
						console.log(`Section ${index} - Found ${testimonialCards.length} testimonial cards`);
						testimonialCards.forEach((card, cardIndex) => {
							card.style.opacity = '0';
							card.style.transform = `scale(0.3) rotateY(${cardIndex % 2 === 0 ? 45 : -45}deg) translateZ(-100px)`;
							card.style.transition = 'opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						});
					}
					
					// Case Study 2 - index 7 - dramatic slide with parallax (opposite)
					if (index === 7) {
						const textContent = section.querySelectorAll('h2, h3, p, a');
						const image = section.querySelector('.w-full.h-96');
						console.log(`Section ${index} - Found ${textContent.length} text elements and ${image ? 1 : 0} images`);
						
						textContent.forEach((el, elIndex) => {
							el.style.opacity = '0';
							el.style.transform = 'translateX(120px) skewX(5deg)';
							el.style.transition = 'opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						});
						
						if (image) {
							image.style.opacity = '0';
							image.style.transform = 'translateX(-120px) scale(0.8) rotateY(10deg)';
							image.style.transition = 'opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						}
					}
					
					// Clients Section - index 8 - dramatic entrance with bounce
					if (index === 8) {
						const clientLogos = section.querySelectorAll('.bg-titanium-charcoal-50');
						console.log(`Section ${index} - Found ${clientLogos.length} client logos`);
						clientLogos.forEach((logo, logoIndex) => {
							logo.style.opacity = '0';
							logo.style.transform = `translateY(${100 + logoIndex * 20}px) scale(0.5) rotateZ(${logoIndex * 15}deg)`;
							logo.style.transition = 'opacity 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55), transform 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
						});
					}
					
					// Certifications Section - index 9 - dramatic 3D flip
					if (index === 9) {
						const certIcons = section.querySelectorAll('.bg-white');
						console.log(`Section ${index} - Found ${certIcons.length} certification icons`);
						certIcons.forEach((icon, iconIndex) => {
							icon.style.opacity = '0';
							icon.style.transform = `rotateY(-180deg) rotateX(${iconIndex * 20 - 40}deg) scale(0.6) translateZ(-200px)`;
							icon.style.transition = 'opacity 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						});
					}
					
					// Case Study 3 - index 10 - dramatic slide with parallax
					if (index === 10) {
						const textContent = section.querySelectorAll('h2, h3, p, a');
						const image = section.querySelector('.w-full.h-96');
						console.log(`Section ${index} - Found ${textContent.length} text elements and ${image ? 1 : 0} images`);
						
						textContent.forEach((el, elIndex) => {
							el.style.opacity = '0';
							el.style.transform = 'translateX(-120px) skewX(-5deg)';
							el.style.transition = 'opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						});
						
						if (image) {
							image.style.opacity = '0';
							image.style.transform = 'translateX(120px) scale(0.8) rotateY(-10deg)';
							image.style.transition = 'opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
						}
					}
					
					// Contact Section - index 11 - dramatic form entrance
					if (index === 11) {
						const formElements = section.querySelectorAll('.bg-copper-charcoal-50, input, textarea, button, .w-8.h-8');
						console.log(`Section ${index} - Found ${formElements.length} form elements`);
						formElements.forEach((element, elementIndex) => {
							element.style.opacity = '0';
							element.style.transform = `translateY(${80 + elementIndex * 15}px) scale(0.8) rotateZ(${elementIndex * 3 - 6}deg)`;
							element.style.transition = 'opacity 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55), transform 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
						});
					}
				});
				console.log('=== ANIMATIONS INITIALIZED ===');
			}

			// Animate specific sections when they come into view
			function animateSection(sectionIndex) {
				if (animatedSections.has(sectionIndex)) return; // Already animated
				animatedSections.add(sectionIndex);
				
				console.log('Animating section', sectionIndex);
				const section = sections[sectionIndex];
				
				// IntroSection (About) - dramatic entrance animation
				if (sectionIndex === 1) {
					console.log('Animating IntroSection with dramatic entrance');
					const elementsToFade = section.querySelectorAll('h2, p, .text-4xl');
					elementsToFade.forEach((el, index) => {
						setTimeout(() => {
							el.style.opacity = '1';
							el.style.transform = 'translateY(0) scale(1)';
						}, index * 200);
					});
				}
				
				// CapabilitiesSection - enhanced sparkling tiles
				if (sectionIndex === 2) {
					console.log('Animating CapabilitiesSection with enhanced sparkle');
					const tiles = section.querySelectorAll('.bg-slate-charcoal-50');
					console.log('Found tiles:', tiles.length);
					tiles.forEach((tile, index) => {
						setTimeout(() => {
							// Add sparkling effect
							tile.style.position = 'relative';
							tile.style.overflow = 'hidden';
							
							// Store original background color
							const originalBg = 'rgb(248, 250, 252)'; // slate-charcoal-50
							
							// Multi-layered flash effect for depth and sophistication
							// Layer 1: Base glow
							tile.style.backgroundColor = '#f8fafc';
							tile.style.boxShadow = '0 0 40px rgba(148, 163, 184, 0.4), 0 0 80px rgba(148, 163, 184, 0.2), inset 0 0 40px rgba(255, 255, 255, 0.1)';
							tile.style.transition = 'all 1.4s cubic-bezier(0.4, 0, 0.2, 1)';
							
							// Layer 2: Inner light bloom
							const innerGlow = document.createElement('div');
							innerGlow.style.position = 'absolute';
							innerGlow.style.top = '50%';
							innerGlow.style.left = '50%';
							innerGlow.style.width = '120%';
							innerGlow.style.height = '120%';
							innerGlow.style.transform = 'translate(-50%, -50%)';
							innerGlow.style.background = 'radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(148,163,184,0.4) 30%, rgba(148,163,184,0.1) 60%, transparent 100%)';
							innerGlow.style.opacity = '1';
							innerGlow.style.transition = 'opacity 1.2s ease-out';
							innerGlow.style.pointerEvents = 'none';
							innerGlow.style.filter = 'blur(8px)';
							tile.appendChild(innerGlow);
							
							// Layer 3: Sparkle sweep with softer edges
							const sparkle = document.createElement('div');
							sparkle.style.position = 'absolute';
							sparkle.style.top = '-20%';
							sparkle.style.left = '-50%';
							sparkle.style.width = '200%';
							sparkle.style.height = '140%';
							sparkle.style.background = 'linear-gradient(45deg, transparent 20%, rgba(255,255,255,0.1) 35%, rgba(255,255,255,0.8) 50%, rgba(255,255,255,0.1) 65%, transparent 80%)';
							sparkle.style.transform = 'translateX(-100%) rotate(-15deg)';
							sparkle.style.transition = 'transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
							sparkle.style.pointerEvents = 'none';
							sparkle.style.filter = 'blur(1px)';
							tile.appendChild(sparkle);
							
							// Layer 4: Edge highlights
							const edgeHighlight = document.createElement('div');
							edgeHighlight.style.position = 'absolute';
							edgeHighlight.style.top = '0';
							edgeHighlight.style.left = '0';
							edgeHighlight.style.width = '100%';
							edgeHighlight.style.height = '100%';
							edgeHighlight.style.border = '1px solid rgba(255,255,255,0.6)';
							edgeHighlight.style.borderRadius = '8px';
							edgeHighlight.style.opacity = '1';
							edgeHighlight.style.transition = 'opacity 1s ease-out';
							edgeHighlight.style.pointerEvents = 'none';
							tile.appendChild(edgeHighlight);
							
							// Animate tile in with dramatic entrance
							tile.style.opacity = '1';
							tile.style.transform = 'scale(1) translateY(0) rotateX(0deg)';
							
							// Trigger sparkle sweep
							setTimeout(() => {
								sparkle.style.transform = 'translateX(50%) rotate(-15deg)';
							}, 150);
							
							// Fade inner glow
							setTimeout(() => {
								innerGlow.style.opacity = '0';
							}, 400);
							
							// Fade edge highlights
							setTimeout(() => {
								edgeHighlight.style.opacity = '0';
							}, 600);
							
							// Cool down the background to final state
							setTimeout(() => {
								tile.style.backgroundColor = originalBg;
								tile.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06)';
							}, 800);
							
							// Clean up effect elements
							setTimeout(() => {
								innerGlow.remove();
								sparkle.remove();
								edgeHighlight.remove();
							}, 1500);
							
						}, index * 200); // Stagger by 200ms (1-2-3-4 effect)
					});
				}
				
				// Case Study 1 - dramatic slide with parallax
				if (sectionIndex === 4) {
					console.log('Animating Case Study 1 with dramatic slide');
					const textContent = section.querySelectorAll('h2, h3, p, a');
					const image = section.querySelector('.w-full.h-96');
					
					textContent.forEach((el, index) => {
						setTimeout(() => {
							el.style.opacity = '1';
							el.style.transform = 'translateX(0) skewX(0deg)';
						}, index * 200);
					});
					
					if (image) {
						setTimeout(() => {
							image.style.opacity = '1';
							image.style.transform = 'translateX(0) scale(1) rotateY(0deg)';
						}, 400);
					}
				}
				
				// Services Section - floating cards with depth
				if (sectionIndex === 5) {
					console.log('Animating Services Section with floating cards');
					const serviceCards = section.querySelectorAll('.bg-steel-charcoal-50');
					
					serviceCards.forEach((card, index) => {
						setTimeout(() => {
							card.style.opacity = '1';
							card.style.transform = 'translateY(0) rotateZ(0deg) scale(1)';
						}, index * 150);
					});
				}
				
				// Testimonials Section - dramatic scale and rotation
				if (sectionIndex === 6) {
					console.log('Animating Testimonials Section with dramatic 3D');
					const testimonialCards = section.querySelectorAll('.bg-white');
					testimonialCards.forEach((card, index) => {
						setTimeout(() => {
							card.style.opacity = '1';
							card.style.transform = 'scale(1) rotateY(0deg) translateZ(0px)';
						}, index * 200);
					});
				}
				
				// Case Study 2 - dramatic slide with parallax (opposite)
				if (sectionIndex === 7) {
					console.log('Animating Case Study 2 with dramatic slide');
					const textContent = section.querySelectorAll('h2, h3, p, a');
					const image = section.querySelector('.w-full.h-96');
					
					textContent.forEach((el, index) => {
						setTimeout(() => {
							el.style.opacity = '1';
							el.style.transform = 'translateX(0) skewX(0deg)';
						}, index * 200);
					});
					
					if (image) {
						setTimeout(() => {
							image.style.opacity = '1';
							image.style.transform = 'translateX(0) scale(1) rotateY(0deg)';
						}, 400);
					}
				}
				
				// Clients Section - dramatic entrance with bounce
				if (sectionIndex === 8) {
					console.log('Animating Clients Section with bounce effect');
					const clientLogos = section.querySelectorAll('.bg-titanium-charcoal-50');
					
					clientLogos.forEach((logo, index) => {
						setTimeout(() => {
							logo.style.opacity = '1';
							logo.style.transform = 'translateY(0) scale(1) rotateZ(0deg)';
						}, index * 120);
					});
				}
				
				// Certifications Section - dramatic 3D flip
				if (sectionIndex === 9) {
					console.log('Animating Certifications Section with 3D flip');
					const certIcons = section.querySelectorAll('.bg-white');
					certIcons.forEach((icon, index) => {
						setTimeout(() => {
							icon.style.opacity = '1';
							icon.style.transform = 'rotateY(0deg) rotateX(0deg) scale(1) translateZ(0px)';
						}, index * 180);
					});
				}
				
				// Case Study 3 - dramatic slide with parallax
				if (sectionIndex === 10) {
					console.log('Animating Case Study 3 with dramatic slide');
					const textContent = section.querySelectorAll('h2, h3, p, a');
					const image = section.querySelector('.w-full.h-96');
					
					textContent.forEach((el, index) => {
						setTimeout(() => {
							el.style.opacity = '1';
							el.style.transform = 'translateX(0) skewX(0deg)';
						}, index * 200);
					});
					
					if (image) {
						setTimeout(() => {
							image.style.opacity = '1';
							image.style.transform = 'translateX(0) scale(1) rotateY(0deg)';
						}, 400);
					}
				}
				
				// Contact Section - dramatic form entrance
				if (sectionIndex === 11) {
					console.log('Animating Contact Section with dramatic entrance');
					const formElements = section.querySelectorAll('.bg-copper-charcoal-50, input, textarea, button, .w-8.h-8');
					
					formElements.forEach((element, index) => {
						setTimeout(() => {
							element.style.opacity = '1';
							element.style.transform = 'translateY(0) scale(1) rotateZ(0deg)';
						}, index * 120);
					});
				}
			}

			function scrollToSection(index) {
				if (index < 0 || index >= totalSections || isScrolling) return;

				console.log(`Scrolling to section ${index}`);

				isScrolling = true;
				currentSection = index;

				// Move all sections
				sections.forEach((section, sectionIndex) => {
					const translateY = (sectionIndex - index) * 100;
					section.style.transform = `translateY(${translateY}vh)`;
					section.style.transition = 'transform 0.56s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
				});

				// Trigger animations for the target section
				setTimeout(() => {
					animateSection(index);
				}, 200); // Start animation partway through transition

				setTimeout(() => {
					isScrolling = false;
				}, 560);
			}

			function handleWheel(e) {
				e.preventDefault();

				if (isScrolling) return;

				console.log('Wheel event:', e.deltaY, 'Current section:', currentSection);

				if (e.deltaY > 0 && currentSection < totalSections - 1) {
					// Scroll down
					scrollToSection(currentSection + 1);
				} else if (e.deltaY < 0 && currentSection > 0) {
					// Scroll up
					scrollToSection(currentSection - 1);
				}
			}

			function handleKeydown(e) {
				if (isScrolling) return;

				switch(e.key) {
					case 'ArrowDown':
					case 'PageDown':
						e.preventDefault();
						if (currentSection < totalSections - 1) {
							scrollToSection(currentSection + 1);
						}
						break;
					case 'ArrowUp':
					case 'PageUp':
						e.preventDefault();
						if (currentSection > 0) {
							scrollToSection(currentSection - 1);
						}
						break;
					case 'Home':
						e.preventDefault();
						scrollToSection(0);
						break;
					case 'End':
						e.preventDefault();
						scrollToSection(totalSections - 1);
						break;
				}
			}

			// Initialize everything when DOM is loaded
			document.addEventListener('DOMContentLoaded', () => {
				console.log('=== DOM LOADED - STARTING INITIALIZATION ===');
				
				// Initialize sections
				initializeSections();
				
				// Initialize animations
				initializeAnimations();
				
				// Add event listeners
				document.addEventListener('wheel', handleWheel, { passive: false });
				document.addEventListener('keydown', handleKeydown);
				
				// Add navigation click handlers
				const navLinks = document.querySelectorAll('a[href^="#"]');
				navLinks.forEach(link => {
					link.addEventListener('click', (e) => {
						e.preventDefault();
						const target = link.getAttribute('href');
						if (target === '#who-we-are') scrollToSection(1);
						else if (target === '#what-we-do') scrollToSection(2);
						else if (target === '#careers') scrollToSection(3);
						else if (target === '#news') scrollToSection(4);
						else if (target === '#contact') scrollToSection(10);
					});
				});
				
				// Trigger initial hero animation
				setTimeout(() => {
					animateSection(0);
				}, 500);
				
				console.log('=== INITIALIZATION COMPLETE ===');
			});

			// Handle resize
			window.addEventListener('resize', () => {
				if (!isScrolling) {
					initializeSections();
					scrollToSection(currentSection);
				}
			});
		</script>
	</body>
</html>
