---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "WTI Solutions - Technology Solutions for Modern Business" } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={description} />
		<title>{title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
		<link rel="stylesheet" href="/src/styles/charcoal-palette.css">
		<link rel="stylesheet" href="/src/styles/palantir-palette.css">
	</head>
	<body class="font-inter antialiased bg-white text-gray-900 overflow-hidden">
		<div id="fullpage-container" class="relative">
			<slot />
		</div>

		<style>
		</style>

		<script>
			import { SectionAnimator } from '../utils/animations.js';

			let currentSection = 0;
			let isScrolling = false;
			let sections = [];
			let totalSections = 0;
			let animator = new SectionAnimator();
			
			// Make currentSection globally accessible for header component
			window.currentSection = currentSection;

			// Section name to index mapping
			const sectionMap = {
				'hero': 0,
				'intro': 1,
				'capabilities': 2,
				'case-study-1': 3,
				'services': 4,
				'testimonials': 5,
				'case-study-2': 6,
				'clients': 7,
				'certifications': 8,
				'case-study-3': 9,
				'contact': 10
			};

			// Get section index from hash
			function getSectionFromHash() {
				const hash = window.location.hash.slice(1); // Remove the #
				return sectionMap[hash] || 0;
			}

			// Update URL hash without triggering scroll
			function updateHash(sectionIndex) {
				const sectionName = Object.keys(sectionMap).find(key => sectionMap[key] === sectionIndex);
				if (sectionName && window.location.hash !== `#${sectionName}`) {
					// Use history.replaceState to avoid adding to browser history
					history.replaceState(null, null, `#${sectionName}`);
				}
			}

			// Initialize sections for full-page scrolling
			function initializeSections() {
				console.log('=== INITIALIZING SECTIONS ===');
				sections = document.querySelectorAll('.full-page-section');
				totalSections = sections.length;
				console.log('Found', totalSections, 'full-page sections');
				
				sections.forEach((section, index) => {
					console.log(`Section ${index}:`, section.className || section.tagName);
					section.style.position = 'fixed';
					section.style.top = '0';
					section.style.left = '0';
					section.style.width = '100vw';
					section.style.height = '100vh';
					section.style.zIndex = totalSections - index;
					section.style.transform = `translateY(${index * 100}vh)`;
					section.style.transition = 'transform 0.56s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
				});
				
				// Set container height
				const container = document.getElementById('fullpage-container');
				if (container) {
					container.style.height = `${totalSections * 100}vh`;
				}
				
				console.log('=== SECTIONS INITIALIZED ===');
			}

			// Animate section when it comes into view
			function animateSection(sectionIndex) {
				if (sectionIndex < 0 || sectionIndex >= totalSections) return;
				
				const section = sections[sectionIndex];
				const sectionType = section.getAttribute('data-section-type');
				
				if (sectionType) {
					animator.animateSection(section, sectionType);
				}
			}

			function scrollToSection(index) {
				if (index < 0 || index >= totalSections || isScrolling) return;

				console.log(`Scrolling to section ${index}`);

				isScrolling = true;
				currentSection = index;
				window.currentSection = index;

				// Update URL hash
				updateHash(index);

				// Dispatch custom event for header to listen to
				const sectionChangeEvent = new CustomEvent('sectionChanged', {
					detail: { currentSection: index }
				});
				document.dispatchEvent(sectionChangeEvent);

				// Move all sections
				sections.forEach((section, sectionIndex) => {
					const translateY = (sectionIndex - index) * 100;
					section.style.transform = `translateY(${translateY}vh)`;
					section.style.transition = 'transform 0.56s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
				});

				// Trigger animations for the target section immediately
				animateSection(index);

				setTimeout(() => {
					isScrolling = false;
				}, 560);
			}

			function handleWheel(e) {
				e.preventDefault();

				if (isScrolling) return;

				console.log('Wheel event:', e.deltaY, 'Current section:', currentSection);

				if (e.deltaY > 0 && currentSection < totalSections - 1) {
					// Scroll down
					scrollToSection(currentSection + 1);
				} else if (e.deltaY < 0 && currentSection > 0) {
					// Scroll up
					scrollToSection(currentSection - 1);
				}
			}

			function handleKeydown(e) {
				if (isScrolling) return;

				switch(e.key) {
					case 'ArrowDown':
					case 'PageDown':
						e.preventDefault();
						if (currentSection < totalSections - 1) {
							scrollToSection(currentSection + 1);
						}
						break;
					case 'ArrowUp':
					case 'PageUp':
						e.preventDefault();
						if (currentSection > 0) {
							scrollToSection(currentSection - 1);
						}
						break;
					case 'Home':
						e.preventDefault();
						scrollToSection(0);
						break;
					case 'End':
						e.preventDefault();
						scrollToSection(totalSections - 1);
						break;
				}
			}

			// Initialize everything when DOM is loaded
			document.addEventListener('DOMContentLoaded', () => {
				console.log('=== DOM LOADED - STARTING INITIALIZATION ===');
				
				// Initialize sections
				initializeSections();
				
				// Check for hash in URL and restore position
				const initialSection = getSectionFromHash();
				if (initialSection !== 0) {
					currentSection = initialSection;
					window.currentSection = initialSection;
					scrollToSection(initialSection);
				}
				
				// Add event listeners
				document.addEventListener('wheel', handleWheel, { passive: false });
				document.addEventListener('keydown', handleKeydown);
				
				// Add navigation click handlers
				const navLinks = document.querySelectorAll('a[href^="#"]');
				navLinks.forEach(link => {
					link.addEventListener('click', (e) => {
						e.preventDefault();
						const target = link.getAttribute('href');
						// Extract the section name from the href (remove the #)
						const sectionName = target.slice(1);
						const sectionIndex = sectionMap[sectionName];
						if (sectionIndex !== undefined) {
							scrollToSection(sectionIndex);
						}
					});
				});
				
				// Trigger initial hero animation
				setTimeout(() => {
					animateSection(currentSection);
				}, 500);
				
				console.log('=== INITIALIZATION COMPLETE ===');
			});

			// Handle resize
			window.addEventListener('resize', () => {
				if (!isScrolling) {
					initializeSections();
					scrollToSection(currentSection);
				}
			});

			// Handle hash changes (browser back/forward buttons)
			window.addEventListener('hashchange', () => {
				const newSection = getSectionFromHash();
				if (newSection !== currentSection && !isScrolling) {
					scrollToSection(newSection);
				}
			});
		</script>
	</body>
</html>
